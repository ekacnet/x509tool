#!/usr/bin/env python3

import re
import socket
import ssl
import sys
from datetime import UTC, datetime, timezone
from enum import IntEnum
from typing import List, Optional, Tuple, Union

import click
import cryptography
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.x509.general_name import (DirectoryName, DNSName, IPAddress,
                                            OtherName, RegisteredID,
                                            RFC822Name,
                                            UniformResourceIdentifier)
from OpenSSL import SSL
from OpenSSL.crypto import FILETYPE_PEM, dump_certificate


class InputType(IntEnum):
    FILEPATH = 1
    SERVER = 2
    DEVICE = 3


class FrontColor(IntEnum):
    BLACK = 30
    RED = 31
    GREEN = 32
    ORANGE = 33
    BLUE = 34
    MAGENTA = 35
    CYAN = 36
    WHITE = 37


def colorize(text: str, color: FrontColor, bright: bool = False) -> str:
    if not sys.stdout.isatty():
        return text
    else:
        if bright:
            offset = 60
        else:
            offset = 0
        return f"\033[{int(color) + offset}m{text}\033[0m"


# Addtional padding to add to fields names when displaying
ADDITIONAL_PADDING = 5
HOST_PREFIX = "host://"
HTTP_PREFIX = "https://"
END_CERT_DELIM = b"-----END CERTIFICATE-----"

# key usage could have the following attributes
USAGE_ATTRIBUTES = [
    "digital_signature",
    "content_commitment",
    "key_encipherment",
    "data_encipherment",
    "key_agreement",
    "key_cert_sign",
    "crl_sign",
]


def guess_type_from_name(input_name: str) -> Tuple[InputType, str]:
    """Try infer the type of input from the name of it"""
    if (
        input_name.startswith("/dev/")
        or input_name.startswith("/")
        or re.match(r"^\.{1,2}/", input_name)
    ):
        return (InputType.DEVICE, input_name)

    if input_name.startswith(HOST_PREFIX):
        return (InputType.SERVER, input_name[len(HOST_PREFIX) :])

    if input_name.startswith(HTTP_PREFIX):
        return (InputType.SERVER, input_name[len(HTTP_PREFIX) :])

    if re.match(r"[\w\.]+:\d+", input_name):
        return (InputType.SERVER, input_name)

    return (InputType.FILEPATH, input_name)


class InputData:
    """Modelize the x509 input data"""

    type: InputType
    input_name: str

    def __init__(self, name: str):
        (self.type, self.input_name) = guess_type_from_name(name)

    def __str__(self):
        if self.type == InputType.FILEPATH:
            return f"file {self.input_name}"

        if self.type == InputType.DEVICE:
            return f"device {self.input_name}"

        if self.type == InputType.SERVER:
            return f"host {self.input_name}"

        return f"UNKNOWN {self.input_name}"

    def get_pem(self):
        """Get the certificate for the input data"""
        if self.type in (InputType.FILEPATH, InputType.DEVICE):
            return self._get_pem_from_file()

        if self.type == InputType.SERVER:
            return self._get_pem_from_server()

        return None

    def _get_pem_from_server(self) -> Optional[bytes]:
        def _ssl_wrap_socket(
            sock,
            keyfile=None,
            certfile=None,
            cert_reqs=None,
            ca_certs=None,
            server_hostname=None,
            ssl_version=None,
        ):
            context = SSL.Context(ssl_version)
            context.verify_mode = cert_reqs
            if ca_certs:
                try:
                    context.load_verify_locations(ca_certs)
                except Exception as e:  # Reraise as SSLError
                    raise ssl.SSLError(e)

            if certfile:
                context.load_cert_chain(certfile, keyfile)
            connection = SSL.Connection(context, sock)
            print(server_hostname)
            if server_hostname:
                connection.set_tlsext_host_name(server_hostname.encode("idna"))
            connection.set_connect_state()
            try:
                connection.do_handshake()
            except SSL.Error as v:
                raise SSL.Error(f"SSL handshake error: {v}")

            return (context, connection)

        s = self.input_name.split(":")
        server = s[0]
        if len(s) > 1:
            port = int(s[1])
        else:
            port = 443

        skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        skt.connect((server, port))

        (_context, ssl_socket) = _ssl_wrap_socket(
            skt, cert_reqs=0, server_hostname=server, ssl_version=SSL.TLS_METHOD
        )

        return "".join(
            [
                dump_certificate(FILETYPE_PEM, c).decode()
                for c in ssl_socket.get_peer_cert_chain()
            ]
        ).encode()

    def _get_pem_from_file(self) -> Optional[bytes]:
        try:
            with open(self.input_name, "rb") as fd:
                pem_data = fd.read()
        except FileNotFoundError:
            print(f"Can't open {self} to read PEM encoded data")
            return None

        return pem_data


def validity_to_text(valid: bool) -> str:
    if valid:
        return colorize("valid", FrontColor.GREEN)
    else:
        return colorize("expired", FrontColor.RED)


def get_expiration(nb_sec: int) -> Tuple[int, str]:
    val = abs(nb_sec)
    if nb_sec < 0:
        sign = -1
    else:
        sign = 1

    if val < 60:
        return (sign * val, "seconds")

    if val < 3600:
        return (sign * int(val / 60), "minutes")

    if val < 86400:
        return (sign * int(val / 3600), "hours")

    # Rounds months to 30 days ...
    if val < 30 * 86400:
        return (sign * int(val / 86400), "days")

    if val < 365 * 86400:
        return (sign * int(val / (30 * 86400)), "months")

    return (sign * int(val / (365 * 86400)), "years")


def is_cert_valid(start: datetime, end: datetime) -> Tuple[bool, int]:
    # start and end date in certicate are in PST
    now = datetime.now(UTC)
    return (start <= now <= end, int((end - now).total_seconds()))


def get_cn(subject: x509.Name) -> Tuple[str, Optional[str]]:
    attrs = subject.get_attributes_for_oid(x509.NameOID.COMMON_NAME)
    if len(attrs) == 0:
        return ("", "Certificate is missing CN attribute")
    if len(attrs) > 1:
        return ("", "Certificate has too many CN attributes")

    return (attrs[0].value, None)


def usage_attr_to_string(attr: str) -> str:
    return " ".join(list(attr.split("_")))


def beautify_usage_name(name: str) -> str:
    val = name
    if val.startswith("key "):
        val = val[4:]
    if val.endswith("sign"):
        val = f"{val}ing"

    val = re.sub(r"(?<! )([A-Z][a-z0-9]+)", lambda x: f" {x.group(1).lower()}", val)

    val = val.capitalize()
    val = re.sub(r"crl ", "CRL ", val, flags=re.I)
    return val


def get_key_usage(
    extensions: x509.extensions.Extensions,
) -> Tuple[Optional[List[str]], Optional[str], Optional[x509.extensions.Extension]]:
    try:
        usage = extensions.get_extension_for_oid(x509.ExtensionOID.KEY_USAGE)
    except x509.extensions.ExtensionNotFound:
        return (None, "No key usages found", None)

    try:
        ext_usage = extensions.get_extension_for_oid(
            x509.ExtensionOID.EXTENDED_KEY_USAGE
        )
    except x509.extensions.ExtensionNotFound:
        ext_usage = None

    ret = []
    for attr in USAGE_ATTRIBUTES:
        if getattr(usage.value, attr):
            ret.append(usage_attr_to_string(attr))

    if ext_usage is not None:
        # pylint: disable=W0212
        ret.extend([e._name for e in ext_usage.value._usages])

    return ([beautify_usage_name(e) for e in ret], None, usage)


def get_ca_issuers(
    extensions: x509.extensions.Extensions,
) -> Tuple[Optional[List[str]], x509.extensions.Extension]:
    return get_ad(extensions, x509.AuthorityInformationAccessOID.CA_ISSUERS)


def get_ocsp(
    extensions: x509.extensions.Extensions,
) -> Tuple[Optional[List[str]], x509.extensions.Extension]:
    return get_ad(extensions, x509.AuthorityInformationAccessOID.OCSP)


def get_ad(
    extensions: x509.extensions.Extensions, oid: x509.oid.AuthorityInformationAccessOID
) -> Tuple[Optional[List[str]], x509.extensions.Extension]:
    try:
        authority_info_access = extensions.get_extension_for_oid(
            x509.ExtensionOID.AUTHORITY_INFORMATION_ACCESS
        )
    except x509.extensions.ExtensionNotFound:
        return (None, None)

    ret = []
    # pylint: disable=W0212
    for access_description in authority_info_access.value._descriptions:
        if access_description._access_method == oid:
            ret.append(access_description._access_location.value)

    if len(ret) > 0:
        return (ret, authority_info_access)

    return (None, None)


def get_crl(
    extensions: x509.extensions.Extensions,
) -> Tuple[Optional[List[str]], x509.extensions.Extension]:
    try:
        crl = extensions.get_extension_for_oid(
            x509.ExtensionOID.CRL_DISTRIBUTION_POINTS
        )
    except x509.extensions.ExtensionNotFound:
        return (None, None)

    ret = []
    # pylint: disable=W0212
    for dp in crl.value._distribution_points:
        for v in dp._full_name:
            ret.append(v.value)

    return (ret, crl)


def get_san(
    extensions: x509.extensions.Extensions,
) -> Tuple[Optional[List[str]], x509.extensions.Extension]:
    try:
        san = extensions.get_extension_for_oid(
            x509.ExtensionOID.SUBJECT_ALTERNATIVE_NAME
        )
    except x509.extensions.ExtensionNotFound:
        return (None, None)

    ret = []

    for prefix, typ in [
        ("other", OtherName),
        ("mail", RFC822Name),
        ("dns", DNSName),
        ("uri", UniformResourceIdentifier),
        ("directory", DirectoryName),
        ("registeredID", RegisteredID),
        ("ip", IPAddress),
    ]:
        for v in san.value.get_values_for_type(typ):
            if isinstance(v, x509.name.Name):
                v = v.rfc4514_string()

            if isinstance(v, IPAddress):
                v = format(v.value)

            ret.append(f"{prefix}:{v}")

    return (ret, san)


def gen_key_info(pubkey) -> str:
    if isinstance(pubkey, cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey):
        return f"RSA {pubkey.key_size}"

    if isinstance(pubkey, cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey):
        return f"DSA {pubkey.key_size}"

    if isinstance(
        pubkey, cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey
    ):
        return f"EC {pubkey.curve.name}"

    if isinstance(
        pubkey, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey
    ):
        return "ED25519"

    if isinstance(
        pubkey, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey
    ):
        return "ED448"

    return "unknown"


def get_skid(
    extensions: x509.extensions.Extensions,
) -> Tuple[Optional[str], x509.extensions.Extension]:

    return get_keyid_for_oid(extensions, x509.ExtensionOID.SUBJECT_KEY_IDENTIFIER)


def format_keyid(value: bytes) -> str:
    # pylint: disable=consider-using-f-string
    _key = "".join("{:02x}".format(b) for b in value)
    return f"keyid: {_key}"


def get_akid(
    extensions: x509.extensions.Extensions,
) -> Tuple[Optional[List[str]], x509.extensions.Extension]:

    oid = x509.ExtensionOID.AUTHORITY_KEY_IDENTIFIER
    try:
        key = extensions.get_extension_for_oid(oid)
    except x509.extensions.ExtensionNotFound:
        return (None, None)

    ret = []

    if key.value.key_identifier is not None:
        ret.append(format_keyid(key.value.key_identifier))

    if key.value.authority_cert_issuer is not None:
        _val = ", ".join(
            [e.value.rfc4514_string() for e in key.value.authority_cert_issuer]
        )
        ret.append(f"dirname:{_val}")

    if key.value.authority_cert_serial_number is not None:
        ret.append(f"serial:{key.value.authority_cert_serial_number}")

    if len(ret) > 0:
        return (ret, key)
    else:
        return (None, None)


def get_keyid_for_oid(
    extensions: x509.extensions.Extensions, oid: x509.ObjectIdentifier
) -> Optional[str]:

    try:
        keyid = extensions.get_extension_for_oid(oid)
    except x509.extensions.ExtensionNotFound:
        return (None, None)

    return (format_keyid(keyid.value.digest), keyid)


def format_and_print_fields(fields: List[Tuple[str, Union[str, List[str]]]]):
    len_longuest_field_name = max([len(v[0]) for v in fields])
    padding = len_longuest_field_name + ADDITIONAL_PADDING
    for field in fields:
        name = f"{field[0]}:"
        if isinstance(field[1], list):
            if len(field[1]) > 0:
                print(f"{name.ljust(padding)}{field[1][0]}")
                for elm in field[1][1:]:
                    string = len_longuest_field_name + ADDITIONAL_PADDING
                    print(f"{' '.ljust(string)}{elm}")
        else:
            print(f"{name.ljust(padding)}{field[1]}")


def get_cert_constraints(
    extensions: x509.extensions.Extensions,
) -> Tuple[Optional[str], x509.extensions.Extension]:
    try:
        constraints = extensions.get_extension_for_oid(
            x509.ExtensionOID.BASIC_CONSTRAINTS
        )
    except x509.extensions.ExtensionNotFound:
        return (None, None)
    critical = constraints.critical
    is_ca = constraints.value.ca
    path_len = constraints.value.path_length

    return (f"critical = {critical}, is CA = {is_ca}, path length = {path_len}", None)


# pylint: disable=too-many-locals
# pylint: disable=too-many-branches
def print_cert(cert: x509.Certificate, verbose=False, tz="UTC"):
    """Print the content of the certificate"""
    fields: List[Tuple[str, Union[str, List[str]]]] = []
    try:
        valid_before = cert.not_valid_before_utc()
        valid_after = cert.not_valid_after_utc()
    except AttributeError as _e:  # noqa: F
        valid_before = datetime(
            cert.not_valid_before.year,
            cert.not_valid_before.month,
            cert.not_valid_before.day,
            cert.not_valid_before.hour,
            cert.not_valid_before.minute,
            cert.not_valid_before.second,
            cert.not_valid_before.microsecond,
            tzinfo=timezone.utc,
        )
        valid_after = datetime(
            cert.not_valid_after.year,
            cert.not_valid_after.month,
            cert.not_valid_after.day,
            cert.not_valid_after.hour,
            cert.not_valid_after.minute,
            cert.not_valid_after.second,
            cert.not_valid_after.microsecond,
            tzinfo=timezone.utc,
        )
    (valid, nb_sec_to_expiration) = is_cert_valid(valid_before, valid_after)
    (value, label) = get_expiration(nb_sec_to_expiration)
    # type of the cert
    # SAN
    # additional identity
    # CN
    # Issuer
    # validity
    # Serial
    # Usage
    # CRL
    # OSCP
    # Ciphers
    # SKID
    # AKID
    warnings = []
    seen_extensions: List[x509.extensions.Extension] = []
    extensions = cert.extensions

    (cert_constraints, extention) = get_cert_constraints(extensions)

    (x509_cn, warn) = get_cn(cert.subject)
    warnings.append(warn)

    (usages, warn, extention) = get_key_usage(extensions)
    seen_extensions.append(extention)
    warnings.append(warn)

    (crl, extention) = get_crl(extensions)
    seen_extensions.append(extention)

    (ocsp, extention) = get_ocsp(extensions)
    seen_extensions.append(extention)

    (ca_issuers, extention) = get_ca_issuers(extensions)
    seen_extensions.append(extention)

    (san, extension) = get_san(extensions)
    seen_extensions.append(extention)

    signature = cert.signature_hash_algorithm

    pubkey = cert.public_key()
    key_info = gen_key_info(pubkey)

    if signature is not None:
        key_info = f"{key_info} / {signature.name}"

    (skid, extension) = get_skid(extensions)
    seen_extensions.append(extention)
    (akid, extension) = get_akid(extensions)
    seen_extensions.append(extention)

    if len(x509_cn) > 0:
        fields.append(("CN", colorize(x509_cn, FrontColor.BLUE)))
    else:
        fields.append(
            ("Subject", colorize(cert.subject.rfc4514_string(), FrontColor.BLUE))
        )
    if san is not None:
        fields.append(("SAN", san))
    fields.append(("Issuer", f"{cert.issuer.rfc4514_string()}"))
    fields.append(
        (
            "Validity",
            f"{validity_to_text(valid)} / {cert.not_valid_before} {tz} "
            f"to {cert.not_valid_after} {tz} ({value} {label} to "
            "expiration)",
        )
    )
    if cert_constraints is not None:
        fields.append(("Constraints", cert_constraints))
    fields.append(("Serial", f"{cert.serial_number}"))
    if usages is not None:
        fields.append(("Usage", f'{", ".join(usages)}'))
    if crl is not None:
        fields.append(("Crl", f'{", ".join(crl)}'))

    if ca_issuers is not None:
        fields.append(("CA issuers", f'{", ".join(ca_issuers)}'))

    if ocsp is not None:
        fields.append(("OSCP", f'{", ".join(ocsp)}'))

    fields.append(("Ciphers", key_info))

    if skid is not None:
        fields.append(("SKID", skid))

    if akid is not None:
        fields.append(("AKID", akid))

    # Format the fields
    format_and_print_fields(fields)

    warnings = list(filter(lambda x: x is not None, warnings))
    if len(warnings) != 0:
        print("\nParsing of certificate generated the following warnings:")
        for wrn in warnings:
            print(f"  {wrn}")


@click.command()
@click.option("--verbose", help="verbose info")
@click.argument("input_name", default="/dev/stdin")
def process(verbose, input_name) -> int:
    """Process the input parameters and return x509 info"""
    in_data = InputData(input_name)
    pem_data = in_data.get_pem()

    if pem_data is None:
        sys.exit(-1)
    certs = pem_data.split(END_CERT_DELIM)
    certs = [c + END_CERT_DELIM for c in certs if len(c.strip(b"\r\n")) > 0]
    for pem_cert in certs:
        try:
            cert = x509.load_pem_x509_certificate(pem_cert, default_backend())
        except ValueError as _e:
            print(
                f"Content of {input} is not a valid " f"PEM encoded certificate: {_e}"
            )
            sys.exit(-2)

        print_cert(cert, verbose=verbose)
        if len(certs) > 1:
            print("-----")

    return 0


if __name__ == "__main__":
    process()
